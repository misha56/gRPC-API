// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: game.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const InsertGame = `-- name: InsertGame :one
INSERT INTO games (
  arena_uuid,
  game_title,
  game_state,
  player_count
)
VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING game_uuid
`

type InsertGameParams struct {
	ArenaUuid   uuid.UUID
	GameTitle   string
	GameState   GameState
	PlayerCount sql.NullInt32
}

func (q *Queries) InsertGame(ctx context.Context, arg InsertGameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, InsertGame,
		arg.ArenaUuid,
		arg.GameTitle,
		arg.GameState,
		arg.PlayerCount,
	)
	var game_uuid uuid.UUID
	err := row.Scan(&game_uuid)
	return game_uuid, err
}

const UpdateGame = `-- name: UpdateGame :one
UPDATE games SET
  game_title = $1,
  game_state = $2,
  player_count = $3
WHERE game_uuid = $4
RETURNING game_uuid AS res
`

type UpdateGameParams struct {
	GameTitle   string
	GameState   GameState
	PlayerCount sql.NullInt32
	GameUuid    uuid.UUID
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, UpdateGame,
		arg.GameTitle,
		arg.GameState,
		arg.PlayerCount,
		arg.GameUuid,
	)
	var res uuid.UUID
	err := row.Scan(&res)
	return res, err
}
